---
version: '1'  # Local text analytics stack
services:
  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - hocs-network
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-server:7.3.1
    hostname: broker
    container_name: broker
    depends_on:
      - kafka-zookeeper
    networks:
      - hocs-network
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous

  kafka-control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka-broker
    networks:
      - hocs-network
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: connect:8083
      CONTROL_CENTER_KSQL_KSQLDB1_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: http://localhost:8088
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  localstack:
    image: localstack/localstack:1.4.0
    restart: on-failure
    ports:
      - "4566:4566"
    networks:
      hocs-network:
        aliases:
          - localhost.localstack.cloud
    environment:
      HOSTNAME_EXTERNAL: localstack
      SERVICES: sqs,sns,s3
      LOCALSTACK_HOSTNAME: "localhost.localstack.cloud"
      SQS_PROVIDER: "elasticmq"
    healthcheck:
      test: "bash -c 'AWS_ACCESS_KEY_ID=fake AWS_SECRET_ACCESS_KEY=fake awslocal s3 ls'"
      timeout: 5s
      retries: 40
    volumes:
      - ${PWD}/ci/localstack/0-install-dependencies.sh:/etc/localstack/init/ready.d/0-install-dependencies.sh
      - ${PWD}/ci/localstack/1-setup-buckets.sh:/etc/localstack/init/ready.d/1-setup-buckets.sh
      - ${PWD}/ci/localstack/2-setup-queues.sh:/etc/localstack/init/ready.d/2-setup-queues.sh

  postgres:
    image: postgres:14-alpine
    command: [ "postgres", "-c", "log_statement=all" ]
    restart: on-failure
    ports:
      - "5432:5432"
    networks:
      - hocs-network
    environment:
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root" ]
    tmpfs:
      - /var/lib/postgresql
    volumes:
      - ${PWD}/ci/db_setup:/docker-entrypoint-initdb.d

networks:
  hocs-network: