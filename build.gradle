plugins {
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'uk.gov.digital.ho.hocs'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation {
        extendsFrom testImplementation
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework:spring-context-indexer:6.0.6'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.4'
    compileOnly 'org.projectlombok:lombok'
    implementation platform('software.amazon.awssdk:bom:2.20.43')
    implementation 'com.h2database:h2:2.1.214'
    implementation 'software.amazon.awssdk:s3'
    implementation 'com.slack.api:slack-api-client:1.29.1'
    implementation 'org.postgresql:postgresql:42.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-batch:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-json:3.0.4'
    implementation 'org.springframework.kafka:spring-kafka:3.0.4'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.4'
    testImplementation 'org.springframework.batch:spring-batch-test:5.0.0'
    testImplementation 'software.amazon.awssdk:s3-transfer-manager'
    testImplementation 'software.amazon.awssdk:aws-crt-client'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.4"
    }
}

jar {
    enabled = false
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

integrationTest {
    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    systemProperty "aws.accessKeyId", "test"
    systemProperty "aws.secretAccessKey", "test"
}
