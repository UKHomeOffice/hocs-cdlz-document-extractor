info:
  app_name: hocs-txa-document-extractor
  environment: default

mode:
  # set to true to collect documents for deletion instead of ingestion
  delete: ${MODE_DELETE:false}
  # CS or WCS, affects notification content and timestamp used on target s3 bucket
  hocs_system: ${MODE_HOCS_SYSTEM:CS}

document-metadata:
  # Standard settings to configure PGDataSource
  driver: org.postgresql.Driver
  ServerName: ${METADATA_SOURCE_HOST:localhost}
  DatabaseName: ${METADATA_SOURCE_DATABASE:postgres}
  PortNumber: ${METADATA_SOURCE_PORT:5432}
  User: ${METADATA_SOURCE_USER:root}
  Password: ${METADATA_SOURCE_PASSWORD:dev}
  metadata_schema: ${METADATA_SOURCE_SCHEMA:metadata}
  metadata_table: ${METADATA_SOURCE_TABLE:document_metadata}
  # fetch_size determines how many records are fetched from the database in one call
  fetch_size: ${METADATA_FETCH_SIZE:2}
  # chunk_size determines how many records are read/processed before writing to Kafka
  chunk_size: ${METADATA_CHUNK_SIZE:2}
  # Timestamps are expected as strings in format "YYYY-MM-DD HH:mm:SS"
  # No timestamp => values are obtained from the target s3 bucket
  last_collection: ${METADATA_LAST_COLLECTION:}

s3:
  # Where documents are copied from
  source_bucket: ${S3_SOURCE_BUCKET:trusted-bucket}
  # Where documents are copied to, and where timestamp metadata lives
  target_bucket: ${S3_TARGET_BUCKET:untrusted-bucket}
  # Endpoint for S3 client calls, to support testing with localstack
  endpoint_url: ${S3_ENDPOINT_URL:http://s3.localhost.localstack.cloud:4566}

kafka:
  bootstrap_servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  # Where to post events for documents to ingest
  ingest_topic: ${KAFKA_INGEST_TOPIC:txa-decs-ingests}
  # Where to post events for documents to delete
  delete_topic: ${KAFKA_DELETE_TOPIC:txa-decs-deletes}
  # Enable/Disable TLS encryption between Kafka client and broker
  use_ssl: ${KAFKA_USE_SSL:false}

slack:
  # Webhook URLs for Slack notifications - if left null, notifications to that channel are skipped.
  decs_channel: ${SLACK_DECS_URL:}
  txa_channel: ${SLACK_TXA_URL:}

spring-batch-db:
  # Configure the in-memory database which serves as the Spring Batch JobRepository
  datasource:
    jdbc-url: jdbc:h2:mem:jobstate
    driver-class-name: org.h2.Driver

---

spring:
  config:
    activate:
      on-profile: integration
  batch:
    job:
      enabled: false  # disable the automatic execution of the job when testing.

...